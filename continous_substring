# Question:
# Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

# Example 1:

# Input: nums = [0,1]
# Output: 2
# Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
# Example 2:

# Input: nums = [0,1,0]
# Output: 2
# Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
# Example 3:

# Input: nums = [0,1,1,1,1,1,0,0,0]
# Output: 6
# Explanation: [1,1,1,0,0,0] is the longest contiguous subarray with equal number of 0 and 1.
 



class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        nums=[-1 if x==0 else x for x in nums]
        result =0
        sum_total=0
        hash_set={0:-1}
        for i, num in enumerate(nums):
            sum_total += num
            if sum_total in hash_set:
                result =max(result, i - hash_set[sum_total])
            else:
                hash_set[sum_total]=i

        return result